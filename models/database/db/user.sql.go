// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: user.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createStaff = `-- name: CreateStaff :one
INSERT INTO users (
    username,
    email,
    first_name,
    last_name,
    gender,
    password_hash,
    verified,
    birthday,
    staff,
    created_at,
    updated_at
)
VALUES( $1 , $2 , $3 , $4 , $5 , $6 , $7 , $8 , $9 , $10 , $11)
RETURNING id, username, email, first_name, last_name, gender, password_hash, verified, birthday, staff, superuser, auth_id, created_at, updated_at, group_id
`

type CreateStaffParams struct {
	Username     string             `json:"username"`
	Email        string             `json:"email"`
	FirstName    string             `json:"first_name"`
	LastName     string             `json:"last_name"`
	Gender       string             `json:"gender"`
	PasswordHash string             `json:"password_hash"`
	Verified     pgtype.Bool        `json:"verified"`
	Birthday     pgtype.Timestamptz `json:"birthday"`
	Staff        pgtype.Bool        `json:"staff"`
	CreatedAt    pgtype.Timestamptz `json:"created_at"`
	UpdatedAt    pgtype.Timestamptz `json:"updated_at"`
}

func (q *Queries) CreateStaff(ctx context.Context, arg CreateStaffParams) (User, error) {
	row := q.db.QueryRow(ctx, createStaff,
		arg.Username,
		arg.Email,
		arg.FirstName,
		arg.LastName,
		arg.Gender,
		arg.PasswordHash,
		arg.Verified,
		arg.Birthday,
		arg.Staff,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.FirstName,
		&i.LastName,
		&i.Gender,
		&i.PasswordHash,
		&i.Verified,
		&i.Birthday,
		&i.Staff,
		&i.Superuser,
		&i.AuthID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.GroupID,
	)
	return i, err
}

const createSuperUser = `-- name: CreateSuperUser :one
INSERT INTO users (
    username,
    email,
    first_name,
    last_name,
    gender,
    password_hash,
    verified,
    birthday,
    superuser,
    created_at,
    updated_at
)
VALUES( $1 , $2 , $3 , $4 , $5 , $6 , $7 , $8 , $9 , $10 , $11)
RETURNING id, username, email, first_name, last_name, gender, password_hash, verified, birthday, staff, superuser, auth_id, created_at, updated_at, group_id
`

type CreateSuperUserParams struct {
	Username     string             `json:"username"`
	Email        string             `json:"email"`
	FirstName    string             `json:"first_name"`
	LastName     string             `json:"last_name"`
	Gender       string             `json:"gender"`
	PasswordHash string             `json:"password_hash"`
	Verified     pgtype.Bool        `json:"verified"`
	Birthday     pgtype.Timestamptz `json:"birthday"`
	Superuser    pgtype.Bool        `json:"superuser"`
	CreatedAt    pgtype.Timestamptz `json:"created_at"`
	UpdatedAt    pgtype.Timestamptz `json:"updated_at"`
}

func (q *Queries) CreateSuperUser(ctx context.Context, arg CreateSuperUserParams) (User, error) {
	row := q.db.QueryRow(ctx, createSuperUser,
		arg.Username,
		arg.Email,
		arg.FirstName,
		arg.LastName,
		arg.Gender,
		arg.PasswordHash,
		arg.Verified,
		arg.Birthday,
		arg.Superuser,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.FirstName,
		&i.LastName,
		&i.Gender,
		&i.PasswordHash,
		&i.Verified,
		&i.Birthday,
		&i.Staff,
		&i.Superuser,
		&i.AuthID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.GroupID,
	)
	return i, err
}

const createUser = `-- name: CreateUser :one
INSERT INTO users (
    username,
    email,
    first_name,
    last_name,
    gender,
    password_hash,
    verified,
    birthday,
    group_id,
    created_at,
    updated_at
)
VALUES( $1 , $2 , $3 , $4 , $5 , $6 , $7 , $8 , $9 , $10 , $11)
RETURNING id, username, email, first_name, last_name, gender, password_hash, verified, birthday, staff, superuser, auth_id, created_at, updated_at, group_id
`

type CreateUserParams struct {
	Username     string             `json:"username"`
	Email        string             `json:"email"`
	FirstName    string             `json:"first_name"`
	LastName     string             `json:"last_name"`
	Gender       string             `json:"gender"`
	PasswordHash string             `json:"password_hash"`
	Verified     pgtype.Bool        `json:"verified"`
	Birthday     pgtype.Timestamptz `json:"birthday"`
	GroupID      pgtype.UUID        `json:"group_id"`
	CreatedAt    pgtype.Timestamptz `json:"created_at"`
	UpdatedAt    pgtype.Timestamptz `json:"updated_at"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, createUser,
		arg.Username,
		arg.Email,
		arg.FirstName,
		arg.LastName,
		arg.Gender,
		arg.PasswordHash,
		arg.Verified,
		arg.Birthday,
		arg.GroupID,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.FirstName,
		&i.LastName,
		&i.Gender,
		&i.PasswordHash,
		&i.Verified,
		&i.Birthday,
		&i.Staff,
		&i.Superuser,
		&i.AuthID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.GroupID,
	)
	return i, err
}

const deleteUser = `-- name: DeleteUser :exec
DELETE FROM users
WHERE id = $1
`

func (q *Queries) DeleteUser(ctx context.Context, id pgtype.UUID) error {
	_, err := q.db.Exec(ctx, deleteUser, id)
	return err
}

const getAllUsers = `-- name: GetAllUsers :many
SELECT id, username, email, first_name, last_name, gender, password_hash, verified, birthday, staff, superuser, auth_id, created_at, updated_at, group_id FROM users
ORDER BY $1
`

func (q *Queries) GetAllUsers(ctx context.Context, dollar_1 interface{}) ([]User, error) {
	rows, err := q.db.Query(ctx, getAllUsers, dollar_1)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []User{}
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.Username,
			&i.Email,
			&i.FirstName,
			&i.LastName,
			&i.Gender,
			&i.PasswordHash,
			&i.Verified,
			&i.Birthday,
			&i.Staff,
			&i.Superuser,
			&i.AuthID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.GroupID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT id, username, email, first_name, last_name, gender, password_hash, verified, birthday, staff, superuser, auth_id, created_at, updated_at, group_id FROM users 
WHERE email = $1 LIMIT 1
`

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRow(ctx, getUserByEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.FirstName,
		&i.LastName,
		&i.Gender,
		&i.PasswordHash,
		&i.Verified,
		&i.Birthday,
		&i.Staff,
		&i.Superuser,
		&i.AuthID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.GroupID,
	)
	return i, err
}

const makeUserVerified = `-- name: MakeUserVerified :one
UPDATE users
  SET
    verified = true,
    updated_at = $1
WHERE id = $2
RETURNING id, username, email, first_name, last_name, gender, password_hash, verified, birthday, staff, superuser, auth_id, created_at, updated_at, group_id
`

type MakeUserVerifiedParams struct {
	UpdatedAt pgtype.Timestamptz `json:"updated_at"`
	ID        pgtype.UUID        `json:"id"`
}

func (q *Queries) MakeUserVerified(ctx context.Context, arg MakeUserVerifiedParams) (User, error) {
	row := q.db.QueryRow(ctx, makeUserVerified, arg.UpdatedAt, arg.ID)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.FirstName,
		&i.LastName,
		&i.Gender,
		&i.PasswordHash,
		&i.Verified,
		&i.Birthday,
		&i.Staff,
		&i.Superuser,
		&i.AuthID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.GroupID,
	)
	return i, err
}

const paginateUsers = `-- name: PaginateUsers :many
SELECT id, username, email, first_name, last_name, gender, password_hash, verified, birthday, staff, superuser, auth_id, created_at, updated_at, group_id FROM users
ORDER BY $1
OFFSET $2
LIMIT $3
`

type PaginateUsersParams struct {
	Column1 interface{} `json:"column_1"`
	Offset  int32       `json:"offset"`
	Limit   int32       `json:"limit"`
}

func (q *Queries) PaginateUsers(ctx context.Context, arg PaginateUsersParams) ([]User, error) {
	rows, err := q.db.Query(ctx, paginateUsers, arg.Column1, arg.Offset, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []User{}
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.Username,
			&i.Email,
			&i.FirstName,
			&i.LastName,
			&i.Gender,
			&i.PasswordHash,
			&i.Verified,
			&i.Birthday,
			&i.Staff,
			&i.Superuser,
			&i.AuthID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.GroupID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const setUserAuthId = `-- name: SetUserAuthId :one
UPDATE users
  SET
    auth_id = $1,
    updated_at = $2
WHERE id = $3
RETURNING id, username, email, first_name, last_name, gender, password_hash, verified, birthday, staff, superuser, auth_id, created_at, updated_at, group_id
`

type SetUserAuthIdParams struct {
	AuthID    pgtype.Text        `json:"auth_id"`
	UpdatedAt pgtype.Timestamptz `json:"updated_at"`
	ID        pgtype.UUID        `json:"id"`
}

func (q *Queries) SetUserAuthId(ctx context.Context, arg SetUserAuthIdParams) (User, error) {
	row := q.db.QueryRow(ctx, setUserAuthId, arg.AuthID, arg.UpdatedAt, arg.ID)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.FirstName,
		&i.LastName,
		&i.Gender,
		&i.PasswordHash,
		&i.Verified,
		&i.Birthday,
		&i.Staff,
		&i.Superuser,
		&i.AuthID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.GroupID,
	)
	return i, err
}

const updateUser = `-- name: UpdateUser :one
UPDATE users
  SET
    username = $1,
    first_name = $2,
    last_name = $3,
    gender = $4,
    birthday = $5,
    updated_at = $6
WHERE id = $7
RETURNING id, username, email, first_name, last_name, gender, password_hash, verified, birthday, staff, superuser, auth_id, created_at, updated_at, group_id
`

type UpdateUserParams struct {
	Username  string             `json:"username"`
	FirstName string             `json:"first_name"`
	LastName  string             `json:"last_name"`
	Gender    string             `json:"gender"`
	Birthday  pgtype.Timestamptz `json:"birthday"`
	UpdatedAt pgtype.Timestamptz `json:"updated_at"`
	ID        pgtype.UUID        `json:"id"`
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, updateUser,
		arg.Username,
		arg.FirstName,
		arg.LastName,
		arg.Gender,
		arg.Birthday,
		arg.UpdatedAt,
		arg.ID,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.FirstName,
		&i.LastName,
		&i.Gender,
		&i.PasswordHash,
		&i.Verified,
		&i.Birthday,
		&i.Staff,
		&i.Superuser,
		&i.AuthID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.GroupID,
	)
	return i, err
}

const updateUserEmail = `-- name: UpdateUserEmail :one
UPDATE users
  SET
    email = $1,
    updated_at = $2
WHERE id = $3
RETURNING id, username, email, first_name, last_name, gender, password_hash, verified, birthday, staff, superuser, auth_id, created_at, updated_at, group_id
`

type UpdateUserEmailParams struct {
	Email     string             `json:"email"`
	UpdatedAt pgtype.Timestamptz `json:"updated_at"`
	ID        pgtype.UUID        `json:"id"`
}

func (q *Queries) UpdateUserEmail(ctx context.Context, arg UpdateUserEmailParams) (User, error) {
	row := q.db.QueryRow(ctx, updateUserEmail, arg.Email, arg.UpdatedAt, arg.ID)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.FirstName,
		&i.LastName,
		&i.Gender,
		&i.PasswordHash,
		&i.Verified,
		&i.Birthday,
		&i.Staff,
		&i.Superuser,
		&i.AuthID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.GroupID,
	)
	return i, err
}

const updateUserPassword = `-- name: UpdateUserPassword :one
UPDATE users
  SET
    password_hash = $1,
    updated_at = $2
WHERE id = $3
RETURNING id, username, email, first_name, last_name, gender, password_hash, verified, birthday, staff, superuser, auth_id, created_at, updated_at, group_id
`

type UpdateUserPasswordParams struct {
	PasswordHash string             `json:"password_hash"`
	UpdatedAt    pgtype.Timestamptz `json:"updated_at"`
	ID           pgtype.UUID        `json:"id"`
}

func (q *Queries) UpdateUserPassword(ctx context.Context, arg UpdateUserPasswordParams) (User, error) {
	row := q.db.QueryRow(ctx, updateUserPassword, arg.PasswordHash, arg.UpdatedAt, arg.ID)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.FirstName,
		&i.LastName,
		&i.Gender,
		&i.PasswordHash,
		&i.Verified,
		&i.Birthday,
		&i.Staff,
		&i.Superuser,
		&i.AuthID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.GroupID,
	)
	return i, err
}
